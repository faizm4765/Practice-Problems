Given two strings s and t of lengths m and n respectively, return the minimum window substring of s 
such that every character in t (including duplicates) is included in the window. 
If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------


class Solution {
public:
    string minWindow(string s, string t) {
        int hash1[256] = {0};
        int hash[256] = {0};
        int m = s.size(),n = t.size(),i;
        if(n > m)
            return "";
        int start = 0,cnt = 0,start_idx = -1,window_size;
        int min_window = INT_MAX;
        for(i = 0;i < n;i++){
            hash1[t[i]]++;
        }
        for(i = 0;i < m;i++){
            hash[s[i]]++;
            
            if((hash1[s[i]] != 0) and (hash[s[i]] <= hash1[s[i]])){
                cnt++;
            }
            if(cnt == n){
                while(start < m and ((hash1[s[start]] == 0) or (hash[s[start]] > hash1[s[start]]) )){
                    hash[s[start]]--;
                    start++;
                }
                window_size = i - start + 1;
                if(window_size < min_window){
                    min_window = window_size;
                    start_idx = start; 
                }
            }
        }
        if(start_idx == -1)
            return "";
        return s.substr(start_idx,min_window);
    }
};
