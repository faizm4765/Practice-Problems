Given an array of positive integers nums and a positive integer target, 
return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. 
If there is no such subarray, return 0 instead.


Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 105

-----------------------------------------------------------------------------------------------------------

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int start = 0,i = 0;
        int n = nums.size(),sum = 0,window_size;
        int min_so_far = INT_MAX;
        while(i < n){
            sum += nums[i];
            if(sum >= target){
                window_size = i - start + 1;
                min_so_far = min(min_so_far,window_size);
            }
            while((start < n) and (sum > target)){
                sum -= nums[start];
                start++;
                if(sum >= target){
                    window_size = i - start + 1;
                    min_so_far = min(min_so_far,window_size);
                }
            }
            i++;
        }
        if(sum >= target){
                window_size = i - start;
                min_so_far = min(min_so_far,window_size);
        }
        if(min_so_far == INT_MAX)
            return 0;
        return min_so_far;
    }
};
