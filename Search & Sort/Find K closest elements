Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. 
The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
 

Constraints:

1 <= k <= arr.length
1 <= arr.length <= 104
arr is sorted in ascending order.
-104 <= arr[i], x <= 104

-------------------------------------------------------------------------------------------------------------
O(n^2)

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        map<int,vector<int>>mp;
        vector<int> res;
        int n = arr.size();
        for(int i = 0;i < n;i++){
            mp[abs(arr[i] - x)].push_back(arr[i]);
        }
        for(auto c:mp){
            for(auto i:c.second){
                res.push_back(i);
                k--;
                if(k == 0)
                    break;
            }
            if(k == 0)
                break;
        }
        sort(res.begin(),res.end());
        return res;
    }
};

--------------------------------------------------------------------------------------------------
O(nlogk)

Priority queue used

typedef pair<int, int> pd;
class Solution {
public:
    struct myComp {
    constexpr bool operator()(pair<int, int> const& a, pair<int, int> const& b)
        const noexcept{
            return a.second < b.second;
        }
    };
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
       priority_queue<pd, vector<pd>, myComp> pq;      // to order priority queue of pair by second elt of pair
       vector<int> res;
       int n = arr.size(); 
       for(int i = 0;i < n;i++){
           if(pq.size() < k){
               pq.push({arr[i],abs(arr[i] - x)});
           }
           else{
               if(pq.top().second > abs(arr[i] - x)){
                    cout<<pq.top().first<<" "<<pq.top().second<<"\n";
                   pq.pop();
                   pq.push({arr[i],abs(arr[i] - x)});    
               }
           }
       }
        while(!pq.empty()){
            // cout<<pq.top().first<<" "<<pq.top().second<<"\n";
            res.push_back(pq.top().first);
            pq.pop();
        }
        sort(res.begin(),res.end());
        return res;
    }
};











