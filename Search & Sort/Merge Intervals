Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
and return an array of the non-overlapping intervals that cover all the intervals in the input.

 Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104



-----------------------------------------------------------------------------------------

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(),intervals.end());
        stack<vector<int>>s;
        for(int i = 0;i < n;i++){
            if(s.empty()){
                s.push(intervals[i]);
            }
            else{
                
                int f = 0;
                while(intervals[i][0] <= s.top()[0] and intervals[i][1] >= s.top()[1]){
                    // cout<<"ji";
                    s.pop();
                    f = 1;
                    if(s.empty())
                        break;
                }
                if(f == 1)
                    s.push(intervals[i]);
                if(intervals[i][0] >= s.top()[0] and intervals[i][0] <= s.top()[1]){
                    vector<int>v(2);
                    v[0] = s.top()[0];
                    if(intervals[i][1] >= s.top()[1])
                        v[1] = intervals[i][1];
                    else
                        v[1] = s.top()[1];
                    // cout<<"v";
                    s.pop();
                    s.push(v);
                }
                else{
                    s.push(intervals[i]);
                }
            }
        }
        vector<vector<int>> v;
        while(!s.empty()){
            v.push_back(s.top());
            s.pop();
        }
        reverse(v.begin(),v.end());
        return v;
    }
};
