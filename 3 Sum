Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []



------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

#define pb push_back
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        int n = nums.size(),sum = 0;
        vector<int> v;
        set<vector<int>> res;
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<n;i++){
            int l = i+1,r = n-1;
            while(l<r){
                sum = nums[i]+nums[l]+nums[r];
                // cout<<sum<<" ";
                if(sum > 0)
                    r--;
                else if(sum == 0){
                    v.pb(nums[i]);
                    v.pb(nums[l]);
                    v.pb(nums[r]);
                    res.insert(v);
                    v.clear();
                    l++;
                }
                else if(sum < 0){
                    l++;
                }
            }
        }
        for (auto it:res){
            ans.pb(it);
        }
        return ans;
    }
};
