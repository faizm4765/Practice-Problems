Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, 
return the area of the largest rectangle in the histogram.

Input: heights = [2,1,5,6,2,3]
Output: 10

Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
----------------------------------------------------------------------------------------------


class Solution {
public:
    void nsl(vector<int>heights,vector<int>&left,int n){
        stack<pair<int,int>> st;
        for(int i = 0;i < n;i++){
            if(st.empty()){
                left[i] = -1;
            }
            else if(st.top().first < heights[i]){
                left[i] = st.top().second;
            }
            else{
                while(!st.empty() && (st.top().first >= heights[i])){
                    st.pop();
                }
                if(st.empty()){
                    left[i] = -1;
                }
                else{
                    left[i] = st.top().second;
                }
            }
            st.push({heights[i],i});
        }
    }
    void nsr(vector<int>heights,vector<int>&right,int n){
        stack<pair<int,int>> st;
        for(int i = n - 1;i >= 0;i--){
            if(st.empty()){
                right[i] = n;
            }
            else if(st.top().first < heights[i]){
                right[i] = st.top().second;
            }
            else{
                while(!st.empty() && (st.top().first >= heights[i])){
                    st.pop();
                }
                if(st.empty()){
                    right[i] = n;
                }
                else{
                    right[i] = st.top().second;
                }
            }
            st.push({heights[i],i});
        }
    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size(),area = -1;
        vector<int>left(n,0);
        vector<int>right(n,0);
        nsl(heights,left,n);
        nsr(heights,right,n);
        for(int i = 0;i < n;i++){
            // cout<<left[i]<<" "<<right[i]<<"\n";
            int cap = (right[i] - left[i] - 1)*(heights[i]);
            area = max(area,cap);
        }
        return area;
    }
};
