Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false

Example 4:

Input: s = "([)]"
Output: false

Example 5:

Input: s = "{[]}"
Output: true
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'
-------------------------------------------------------------------------------------------------------

class Solution {
public:
    int check(char ch1,char ch2){
        return ((ch1=='(' and ch2==')') or (ch1=='[' and ch2==']') or (ch1=='{' and ch2=='}'));
    }
    bool isValid(string s) {
        int n = s.length(),i;
        stack<char>st;
        for(i=0;i<n;i++){
            if(s[i] == '(' or s[i] == '{' or s[i] == '[')
                st.push(s[i]);
            else if(!st.empty()) {
                if(check(st.top(),s[i]))
                    st.pop();
                else
                    return 0;
            }else
                return 0;
        }
        if(!st.empty())
            return 0;
        return 1;
    }
};
